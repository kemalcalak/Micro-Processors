CCS PCH C Compiler, Version 5.007, 61971               19-Mar-24 15:35

               Filename:   C:\Kodlar\Micro-Processors\Display2\main.lst

               ROM used:   748 bytes (2%)
                           Largest free fragment is 32020
               RAM used:   6 (0%) at main() level
                           13 (1%) worst case
               Stack used: 0 locations
               Stack size: 31

*
0000:  GOTO   0054
.................... #include <main.h> 
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
0004:  MOVF   0C,W
0006:  CLRF   01
0008:  SUBWF  0B,W
000A:  BC    0012
000C:  MOVFF  0B,00
0010:  BRA    002A
0012:  CLRF   00
0014:  MOVLW  08
0016:  MOVWF  0D
0018:  RLCF   0B,F
001A:  RLCF   00,F
001C:  MOVF   0C,W
001E:  SUBWF  00,W
0020:  BTFSC  FD8.0
0022:  MOVWF  00
0024:  RLCF   01,F
0026:  DECFSZ 0D,F
0028:  BRA    0018
002A:  RETURN 0
*
0262:  ADDWF  FE8,W
0264:  CLRF   FF7
0266:  RLCF   FF7,F
0268:  ADDLW  7D
026A:  MOVWF  FF6
026C:  MOVLW  02
026E:  ADDWFC FF7,F
0270:  TBLRD*-
0272:  MOVF   FF5,W
0274:  MOVWF  FFA
0276:  TBLRD*
0278:  MOVF   FF5,W
027A:  MOVWF  FF9
027C:  DATA 0C,01
027E:  DATA 16,01
0280:  DATA 20,01
0282:  DATA 2A,01
0284:  DATA 34,01
0286:  DATA 3E,01
0288:  DATA 48,01
028A:  DATA 52,01
028C:  DATA 5C,01
028E:  DATA 66,01
0290:  ADDWF  FE8,W
0292:  CLRF   FF7
0294:  RLCF   FF7,F
0296:  ADDLW  AB
0298:  MOVWF  FF6
029A:  MOVLW  02
029C:  ADDWFC FF7,F
029E:  TBLRD*-
02A0:  MOVF   FF5,W
02A2:  MOVWF  FFA
02A4:  TBLRD*
02A6:  MOVF   FF5,W
02A8:  MOVWF  FF9
02AA:  DATA 80,01
02AC:  DATA 8A,01
02AE:  DATA 94,01
02B0:  DATA 9E,01
02B2:  DATA A8,01
02B4:  DATA B2,01
02B6:  DATA BC,01
02B8:  DATA C6,01
02BA:  DATA D0,01
02BC:  DATA DA,01
02BE:  ADDWF  FE8,W
02C0:  CLRF   FF7
02C2:  RLCF   FF7,F
02C4:  ADDLW  D9
02C6:  MOVWF  FF6
02C8:  MOVLW  02
02CA:  ADDWFC FF7,F
02CC:  TBLRD*-
02CE:  MOVF   FF5,W
02D0:  MOVWF  FFA
02D2:  TBLRD*
02D4:  MOVF   FF5,W
02D6:  MOVWF  FF9
02D8:  DATA F4,01
02DA:  DATA FE,01
02DC:  DATA 08,02
02DE:  DATA 12,02
02E0:  DATA 1C,02
02E2:  DATA 26,02
02E4:  DATA 30,02
02E6:  DATA 3A,02
02E8:  DATA 44,02
02EA:  DATA 4E,02
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
*
002C:  CLRF   FEA
002E:  MOVLW  09
0030:  MOVWF  FE9
0032:  MOVF   FEF,W
0034:  BZ    0052
0036:  MOVLW  01
0038:  MOVWF  01
003A:  CLRF   00
003C:  DECFSZ 00,F
003E:  BRA    003C
0040:  DECFSZ 01,F
0042:  BRA    003A
0044:  MOVLW  4A
0046:  MOVWF  00
0048:  DECFSZ 00,F
004A:  BRA    0048
004C:  BRA    004E
004E:  DECFSZ FEF,F
0050:  BRA    0036
0052:  RETURN 0
.................... #use FIXED_IO( C_outputs=PIN_C6,PIN_C5,PIN_C4,PIN_C3,PIN_C2,PIN_C1,PIN_C0 ) 
....................  
....................  
....................  
.................... void main() 
0054:  CLRF   FF8
0056:  BCF    FD0.7
0058:  BSF    FC1.0
005A:  BSF    FC1.1
005C:  BSF    FC1.2
005E:  BCF    FC1.3
.................... { 
....................    set_tris_a(0xff); 
0060:  MOVLW  FF
0062:  MOVWF  F92
....................    set_tris_c(0x00); 
0064:  MOVLW  00
0066:  MOVWF  F94
....................    output_c(0x00); 
0068:  MOVLW  80
006A:  MOVWF  F94
006C:  CLRF   F8B
....................    int sayi=0,a,b,c; 
006E:  CLRF   05
....................    while(TRUE) 
....................    { 
....................          if (sayi < 10) { 
0070:  MOVF   05,W
0072:  SUBLW  09
0074:  BNC   0080
....................         a = 0; 
0076:  CLRF   06
....................         b = 0; 
0078:  CLRF   07
....................         c = sayi; 
007A:  MOVFF  05,08
....................     } 
007E:  BRA    0100
....................     else if (sayi == 10) { 
0080:  MOVF   05,W
0082:  SUBLW  0A
0084:  BNZ   0090
....................         a = 0; 
0086:  CLRF   06
....................         b = 1; 
0088:  MOVLW  01
008A:  MOVWF  07
....................         c = 0; 
008C:  CLRF   08
....................     } 
008E:  BRA    0100
....................     else if (sayi > 10 && sayi < 100) { 
0090:  MOVF   05,W
0092:  SUBLW  0A
0094:  BC    00B8
0096:  MOVF   05,W
0098:  SUBLW  63
009A:  BNC   00B8
....................         a = 0; 
009C:  CLRF   06
....................         b = sayi / 10; 
009E:  MOVFF  05,0B
00A2:  MOVLW  0A
00A4:  MOVWF  0C
00A6:  RCALL  0004
00A8:  MOVFF  01,07
....................         c = sayi - (b * 10); 
00AC:  MOVF   07,W
00AE:  MULLW  0A
00B0:  MOVF   FF3,W
00B2:  SUBWF  05,W
00B4:  MOVWF  08
....................     } 
00B6:  BRA    0100
....................     else if (sayi == 100) { 
00B8:  MOVF   05,W
00BA:  SUBLW  64
00BC:  BNZ   00C8
....................         a = 1; 
00BE:  MOVLW  01
00C0:  MOVWF  06
....................         b = 0; 
00C2:  CLRF   07
....................         c = 0; 
00C4:  CLRF   08
....................     } 
00C6:  BRA    0100
....................     else { 
....................         a = sayi / 100; 
00C8:  MOVFF  05,0B
00CC:  MOVLW  64
00CE:  MOVWF  0C
00D0:  RCALL  0004
00D2:  MOVFF  01,06
....................         b = (sayi - (a * 100)) / 10; 
00D6:  MOVF   06,W
00D8:  MULLW  64
00DA:  MOVF   FF3,W
00DC:  SUBWF  05,W
00DE:  MOVWF  0A
00E0:  MOVWF  0B
00E2:  MOVLW  0A
00E4:  MOVWF  0C
00E6:  RCALL  0004
00E8:  MOVFF  01,07
....................         c = sayi - (a * 100 + b * 10); 
00EC:  MOVF   06,W
00EE:  MULLW  64
00F0:  MOVFF  FF3,09
00F4:  MOVF   07,W
00F6:  MULLW  0A
00F8:  MOVF   FF3,W
00FA:  ADDWF  09,W
00FC:  SUBWF  05,W
00FE:  MOVWF  08
....................     } 
....................          switch(a){ 
0100:  MOVF   06,W
0102:  ADDLW  F6
0104:  BC    016E
0106:  ADDLW  0A
0108:  GOTO   0262
....................             case 0: 
....................                output_c(0b00010000); 
010C:  MOVLW  80
010E:  MOVWF  F94
0110:  MOVLW  10
0112:  MOVWF  F8B
....................             break; 
0114:  BRA    016E
....................             case 1: 
....................                output_c(0b00010001); 
0116:  MOVLW  80
0118:  MOVWF  F94
011A:  MOVLW  11
011C:  MOVWF  F8B
....................             break; 
011E:  BRA    016E
....................             case 2: 
....................                output_c(0b00010010); 
0120:  MOVLW  80
0122:  MOVWF  F94
0124:  MOVLW  12
0126:  MOVWF  F8B
....................             break; 
0128:  BRA    016E
....................             case 3: 
....................                output_c(0b00010011); 
012A:  MOVLW  80
012C:  MOVWF  F94
012E:  MOVLW  13
0130:  MOVWF  F8B
....................             break; 
0132:  BRA    016E
....................             case 4: 
....................                output_c(0b00010100); 
0134:  MOVLW  80
0136:  MOVWF  F94
0138:  MOVLW  14
013A:  MOVWF  F8B
....................             break; 
013C:  BRA    016E
....................             case 5: 
....................                output_c(0b00010101); 
013E:  MOVLW  80
0140:  MOVWF  F94
0142:  MOVLW  15
0144:  MOVWF  F8B
....................             break; 
0146:  BRA    016E
....................             case 6: 
....................                output_c(0b00010110); 
0148:  MOVLW  80
014A:  MOVWF  F94
014C:  MOVLW  16
014E:  MOVWF  F8B
....................             break; 
0150:  BRA    016E
....................             case 7: 
....................                output_c(0b00010111); 
0152:  MOVLW  80
0154:  MOVWF  F94
0156:  MOVLW  17
0158:  MOVWF  F8B
....................             break; 
015A:  BRA    016E
....................             case 8: 
....................                output_c(0b00011000); 
015C:  MOVLW  80
015E:  MOVWF  F94
0160:  MOVLW  18
0162:  MOVWF  F8B
....................             break; 
0164:  BRA    016E
....................             case 9: 
....................                output_c(0b00011001); 
0166:  MOVLW  80
0168:  MOVWF  F94
016A:  MOVLW  19
016C:  MOVWF  F8B
....................             break; 
....................          } 
....................          delay_ms(200); 
016E:  MOVLW  C8
0170:  MOVWF  09
0172:  RCALL  002C
....................          switch(b){ 
0174:  MOVF   07,W
0176:  ADDLW  F6
0178:  BC    01E2
017A:  ADDLW  0A
017C:  GOTO   0290
....................             case 0: 
....................                output_c(0b00100000); 
0180:  MOVLW  80
0182:  MOVWF  F94
0184:  MOVLW  20
0186:  MOVWF  F8B
....................             break; 
0188:  BRA    01E2
....................             case 1: 
....................                output_c(0b00100001); 
018A:  MOVLW  80
018C:  MOVWF  F94
018E:  MOVLW  21
0190:  MOVWF  F8B
....................             break; 
0192:  BRA    01E2
....................             case 2: 
....................                output_c(0b00100010); 
0194:  MOVLW  80
0196:  MOVWF  F94
0198:  MOVLW  22
019A:  MOVWF  F8B
....................             break; 
019C:  BRA    01E2
....................             case 3: 
....................                output_c(0b00100011); 
019E:  MOVLW  80
01A0:  MOVWF  F94
01A2:  MOVLW  23
01A4:  MOVWF  F8B
....................             break; 
01A6:  BRA    01E2
....................             case 4: 
....................                output_c(0b00100100); 
01A8:  MOVLW  80
01AA:  MOVWF  F94
01AC:  MOVLW  24
01AE:  MOVWF  F8B
....................             break; 
01B0:  BRA    01E2
....................             case 5: 
....................                output_c(0b00100101); 
01B2:  MOVLW  80
01B4:  MOVWF  F94
01B6:  MOVLW  25
01B8:  MOVWF  F8B
....................             break; 
01BA:  BRA    01E2
....................             case 6: 
....................                output_c(0b00100110); 
01BC:  MOVLW  80
01BE:  MOVWF  F94
01C0:  MOVLW  26
01C2:  MOVWF  F8B
....................             break; 
01C4:  BRA    01E2
....................             case 7: 
....................                output_c(0b00100111); 
01C6:  MOVLW  80
01C8:  MOVWF  F94
01CA:  MOVLW  27
01CC:  MOVWF  F8B
....................             break; 
01CE:  BRA    01E2
....................             case 8: 
....................                output_c(0b00101000); 
01D0:  MOVLW  80
01D2:  MOVWF  F94
01D4:  MOVLW  28
01D6:  MOVWF  F8B
....................             break; 
01D8:  BRA    01E2
....................             case 9: 
....................                output_c(0b00101001); 
01DA:  MOVLW  80
01DC:  MOVWF  F94
01DE:  MOVLW  29
01E0:  MOVWF  F8B
....................             break; 
....................          } 
....................          delay_ms(200); 
01E2:  MOVLW  C8
01E4:  MOVWF  09
01E6:  RCALL  002C
....................          switch(c){ 
01E8:  MOVF   08,W
01EA:  ADDLW  F6
01EC:  BC    0256
01EE:  ADDLW  0A
01F0:  GOTO   02BE
....................             case 0: 
....................                output_c(0b01000000); 
01F4:  MOVLW  80
01F6:  MOVWF  F94
01F8:  MOVLW  40
01FA:  MOVWF  F8B
....................             break; 
01FC:  BRA    0256
....................             case 1: 
....................                output_c(0b01000001); 
01FE:  MOVLW  80
0200:  MOVWF  F94
0202:  MOVLW  41
0204:  MOVWF  F8B
....................             break; 
0206:  BRA    0256
....................             case 2: 
....................                output_c(0b01000010); 
0208:  MOVLW  80
020A:  MOVWF  F94
020C:  MOVLW  42
020E:  MOVWF  F8B
....................             break; 
0210:  BRA    0256
....................             case 3: 
....................                output_c(0b01000011); 
0212:  MOVLW  80
0214:  MOVWF  F94
0216:  MOVLW  43
0218:  MOVWF  F8B
....................             break; 
021A:  BRA    0256
....................             case 4: 
....................                output_c(0b01000100); 
021C:  MOVLW  80
021E:  MOVWF  F94
0220:  MOVLW  44
0222:  MOVWF  F8B
....................             break; 
0224:  BRA    0256
....................             case 5: 
....................                output_c(0b01000101); 
0226:  MOVLW  80
0228:  MOVWF  F94
022A:  MOVLW  45
022C:  MOVWF  F8B
....................             break; 
022E:  BRA    0256
....................             case 6: 
....................                output_c(0b01000110); 
0230:  MOVLW  80
0232:  MOVWF  F94
0234:  MOVLW  46
0236:  MOVWF  F8B
....................             break; 
0238:  BRA    0256
....................             case 7: 
....................                output_c(0b01000111); 
023A:  MOVLW  80
023C:  MOVWF  F94
023E:  MOVLW  47
0240:  MOVWF  F8B
....................             break; 
0242:  BRA    0256
....................             case 8: 
....................                output_c(0b01001000); 
0244:  MOVLW  80
0246:  MOVWF  F94
0248:  MOVLW  48
024A:  MOVWF  F8B
....................             break; 
024C:  BRA    0256
....................             case 9: 
....................                output_c(0b01001001); 
024E:  MOVLW  80
0250:  MOVWF  F94
0252:  MOVLW  49
0254:  MOVWF  F8B
....................             break; 
....................          } 
....................          delay_ms(200); 
0256:  MOVLW  C8
0258:  MOVWF  09
025A:  RCALL  002C
....................          sayi++; 
025C:  INCF   05,F
025E:  BRA    0070
....................    } 
....................  
.................... } 
0260:  SLEEP 

Configuration Fuses:
   Word  1: 2100   XT NOOSCSEN
   Word  2: 0E0C   PUT NOBROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
